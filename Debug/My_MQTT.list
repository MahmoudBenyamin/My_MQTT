
My_MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000d1c  08000d1c  00010d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d34  08000d34  00010d3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d34  08000d34  00010d3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d34  08000d3c  00010d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d34  08000d34  00010d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d38  08000d38  00010d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000000  08000d3c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08000d3c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010d3c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001071  00000000  00000000  00010d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000664  00000000  00000000  00011ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00012448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000125f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000018b6  00000000  00000000  00012750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000186c  00000000  00000000  00014006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008755  00000000  00000000  00015872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001dfc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000598  00000000  00000000  0001e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000d04 	.word	0x08000d04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000d04 	.word	0x08000d04

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <MGPIO_vSetPinMode>:
							       - Copy_u8Pin 	  :  The pin we use 
							       - Copy_u8Mode       :  The mode(input , general purpose outpt, alternate function , analog)
	
*/
void MGPIO_vSetPinMode(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Mode)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
 80001ee:	460b      	mov	r3, r1
 80001f0:	71bb      	strb	r3, [r7, #6]
 80001f2:	4613      	mov	r3, r2
 80001f4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2b05      	cmp	r3, #5
 80001fa:	d857      	bhi.n	80002ac <MGPIO_vSetPinMode+0xc8>
 80001fc:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <MGPIO_vSetPinMode+0x20>)
 80001fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000202:	bf00      	nop
 8000204:	0800021d 	.word	0x0800021d
 8000208:	08000235 	.word	0x08000235
 800020c:	0800024d 	.word	0x0800024d
 8000210:	08000265 	.word	0x08000265
 8000214:	0800027d 	.word	0x0800027d
 8000218:	08000295 	.word	0x08000295
	{
		case GPIOA :(MGPIOA ->MODER)|= (u32)(Copy_u8Mode << (2*Copy_u8Pin)); break;
 800021c:	4b27      	ldr	r3, [pc, #156]	; (80002bc <MGPIO_vSetPinMode+0xd8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	7979      	ldrb	r1, [r7, #5]
 8000222:	79ba      	ldrb	r2, [r7, #6]
 8000224:	0052      	lsls	r2, r2, #1
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	4611      	mov	r1, r2
 800022c:	4a23      	ldr	r2, [pc, #140]	; (80002bc <MGPIO_vSetPinMode+0xd8>)
 800022e:	430b      	orrs	r3, r1
 8000230:	6013      	str	r3, [r2, #0]
 8000232:	e03c      	b.n	80002ae <MGPIO_vSetPinMode+0xca>
		case GPIOB :(MGPIOB ->MODER)|= (u32)(Copy_u8Mode << (2*Copy_u8Pin)); break;
 8000234:	4b22      	ldr	r3, [pc, #136]	; (80002c0 <MGPIO_vSetPinMode+0xdc>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	7979      	ldrb	r1, [r7, #5]
 800023a:	79ba      	ldrb	r2, [r7, #6]
 800023c:	0052      	lsls	r2, r2, #1
 800023e:	fa01 f202 	lsl.w	r2, r1, r2
 8000242:	4611      	mov	r1, r2
 8000244:	4a1e      	ldr	r2, [pc, #120]	; (80002c0 <MGPIO_vSetPinMode+0xdc>)
 8000246:	430b      	orrs	r3, r1
 8000248:	6013      	str	r3, [r2, #0]
 800024a:	e030      	b.n	80002ae <MGPIO_vSetPinMode+0xca>
		case GPIOC :(MGPIOC ->MODER)|= (u32)(Copy_u8Mode << (2*Copy_u8Pin)); break;
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <MGPIO_vSetPinMode+0xe0>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	7979      	ldrb	r1, [r7, #5]
 8000252:	79ba      	ldrb	r2, [r7, #6]
 8000254:	0052      	lsls	r2, r2, #1
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	4611      	mov	r1, r2
 800025c:	4a19      	ldr	r2, [pc, #100]	; (80002c4 <MGPIO_vSetPinMode+0xe0>)
 800025e:	430b      	orrs	r3, r1
 8000260:	6013      	str	r3, [r2, #0]
 8000262:	e024      	b.n	80002ae <MGPIO_vSetPinMode+0xca>
		case GPIOD :(MGPIOD ->MODER)|= (u32)(Copy_u8Mode << (2*Copy_u8Pin)); break;
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <MGPIO_vSetPinMode+0xe4>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	7979      	ldrb	r1, [r7, #5]
 800026a:	79ba      	ldrb	r2, [r7, #6]
 800026c:	0052      	lsls	r2, r2, #1
 800026e:	fa01 f202 	lsl.w	r2, r1, r2
 8000272:	4611      	mov	r1, r2
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <MGPIO_vSetPinMode+0xe4>)
 8000276:	430b      	orrs	r3, r1
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e018      	b.n	80002ae <MGPIO_vSetPinMode+0xca>
		case GPIOE :(MGPIOE ->MODER)|= (u32)(Copy_u8Mode << (2*Copy_u8Pin)); break;
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <MGPIO_vSetPinMode+0xe8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	7979      	ldrb	r1, [r7, #5]
 8000282:	79ba      	ldrb	r2, [r7, #6]
 8000284:	0052      	lsls	r2, r2, #1
 8000286:	fa01 f202 	lsl.w	r2, r1, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <MGPIO_vSetPinMode+0xe8>)
 800028e:	430b      	orrs	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
 8000292:	e00c      	b.n	80002ae <MGPIO_vSetPinMode+0xca>
		case GPIOH :(MGPIOH ->MODER)|= (u32)(Copy_u8Mode << (2*Copy_u8Pin)); break;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <MGPIO_vSetPinMode+0xec>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	7979      	ldrb	r1, [r7, #5]
 800029a:	79ba      	ldrb	r2, [r7, #6]
 800029c:	0052      	lsls	r2, r2, #1
 800029e:	fa01 f202 	lsl.w	r2, r1, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <MGPIO_vSetPinMode+0xec>)
 80002a6:	430b      	orrs	r3, r1
 80002a8:	6013      	str	r3, [r2, #0]
 80002aa:	e000      	b.n	80002ae <MGPIO_vSetPinMode+0xca>
		default: /**/ break;
 80002ac:	bf00      	nop
	}
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000
 80002c0:	40020400 	.word	0x40020400
 80002c4:	40020800 	.word	0x40020800
 80002c8:	40020c00 	.word	0x40020c00
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40021c00 	.word	0x40021c00

080002d4 <MGPIO_vSetPinOutputType>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void MGPIO_vSetPinOutputType(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8OType)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	460b      	mov	r3, r1
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	4613      	mov	r3, r2
 80002e4:	717b      	strb	r3, [r7, #5]
	if(Copy_u8OType == PUSH_PULL)
 80002e6:	797b      	ldrb	r3, [r7, #5]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d15b      	bne.n	80003a4 <MGPIO_vSetPinOutputType+0xd0>
	{
		switch(Copy_u8Port)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	2b05      	cmp	r3, #5
 80002f0:	f200 80b0 	bhi.w	8000454 <MGPIO_vSetPinOutputType+0x180>
 80002f4:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <MGPIO_vSetPinOutputType+0x28>)
 80002f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fa:	bf00      	nop
 80002fc:	08000315 	.word	0x08000315
 8000300:	0800032d 	.word	0x0800032d
 8000304:	08000345 	.word	0x08000345
 8000308:	0800035d 	.word	0x0800035d
 800030c:	08000375 	.word	0x08000375
 8000310:	0800038d 	.word	0x0800038d
		{
			case GPIOA :CLR_BIT(MGPIOA ->OTYPER,Copy_u8Pin);	break;
 8000314:	4b55      	ldr	r3, [pc, #340]	; (800046c <MGPIO_vSetPinOutputType+0x198>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	43d2      	mvns	r2, r2
 8000322:	4611      	mov	r1, r2
 8000324:	4a51      	ldr	r2, [pc, #324]	; (800046c <MGPIO_vSetPinOutputType+0x198>)
 8000326:	400b      	ands	r3, r1
 8000328:	6053      	str	r3, [r2, #4]
 800032a:	e098      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOB :CLR_BIT(MGPIOB ->OTYPER,Copy_u8Pin);	break;
 800032c:	4b50      	ldr	r3, [pc, #320]	; (8000470 <MGPIO_vSetPinOutputType+0x19c>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	2101      	movs	r1, #1
 8000334:	fa01 f202 	lsl.w	r2, r1, r2
 8000338:	43d2      	mvns	r2, r2
 800033a:	4611      	mov	r1, r2
 800033c:	4a4c      	ldr	r2, [pc, #304]	; (8000470 <MGPIO_vSetPinOutputType+0x19c>)
 800033e:	400b      	ands	r3, r1
 8000340:	6053      	str	r3, [r2, #4]
 8000342:	e08c      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOC :CLR_BIT(MGPIOC ->OTYPER,Copy_u8Pin);	break;
 8000344:	4b4b      	ldr	r3, [pc, #300]	; (8000474 <MGPIO_vSetPinOutputType+0x1a0>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	79ba      	ldrb	r2, [r7, #6]
 800034a:	2101      	movs	r1, #1
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	43d2      	mvns	r2, r2
 8000352:	4611      	mov	r1, r2
 8000354:	4a47      	ldr	r2, [pc, #284]	; (8000474 <MGPIO_vSetPinOutputType+0x1a0>)
 8000356:	400b      	ands	r3, r1
 8000358:	6053      	str	r3, [r2, #4]
 800035a:	e080      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOD :CLR_BIT(MGPIOD ->OTYPER,Copy_u8Pin);	break;
 800035c:	4b46      	ldr	r3, [pc, #280]	; (8000478 <MGPIO_vSetPinOutputType+0x1a4>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	79ba      	ldrb	r2, [r7, #6]
 8000362:	2101      	movs	r1, #1
 8000364:	fa01 f202 	lsl.w	r2, r1, r2
 8000368:	43d2      	mvns	r2, r2
 800036a:	4611      	mov	r1, r2
 800036c:	4a42      	ldr	r2, [pc, #264]	; (8000478 <MGPIO_vSetPinOutputType+0x1a4>)
 800036e:	400b      	ands	r3, r1
 8000370:	6053      	str	r3, [r2, #4]
 8000372:	e074      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOE :CLR_BIT(MGPIOE ->OTYPER,Copy_u8Pin);	break;
 8000374:	4b41      	ldr	r3, [pc, #260]	; (800047c <MGPIO_vSetPinOutputType+0x1a8>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	79ba      	ldrb	r2, [r7, #6]
 800037a:	2101      	movs	r1, #1
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	4611      	mov	r1, r2
 8000384:	4a3d      	ldr	r2, [pc, #244]	; (800047c <MGPIO_vSetPinOutputType+0x1a8>)
 8000386:	400b      	ands	r3, r1
 8000388:	6053      	str	r3, [r2, #4]
 800038a:	e068      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOH :CLR_BIT(MGPIOH ->OTYPER,Copy_u8Pin);	break;
 800038c:	4b3c      	ldr	r3, [pc, #240]	; (8000480 <MGPIO_vSetPinOutputType+0x1ac>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	79ba      	ldrb	r2, [r7, #6]
 8000392:	2101      	movs	r1, #1
 8000394:	fa01 f202 	lsl.w	r2, r1, r2
 8000398:	43d2      	mvns	r2, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a38      	ldr	r2, [pc, #224]	; (8000480 <MGPIO_vSetPinOutputType+0x1ac>)
 800039e:	400b      	ands	r3, r1
 80003a0:	6053      	str	r3, [r2, #4]
 80003a2:	e05c      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			default: /*  */ break;
		}
	}
	else if(Copy_u8OType == OPEN_DRAIN)
 80003a4:	797b      	ldrb	r3, [r7, #5]
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d156      	bne.n	8000458 <MGPIO_vSetPinOutputType+0x184>
	{
		switch(Copy_u8Port)
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b05      	cmp	r3, #5
 80003ae:	d855      	bhi.n	800045c <MGPIO_vSetPinOutputType+0x188>
 80003b0:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <MGPIO_vSetPinOutputType+0xe4>)
 80003b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b6:	bf00      	nop
 80003b8:	080003d1 	.word	0x080003d1
 80003bc:	080003e7 	.word	0x080003e7
 80003c0:	080003fd 	.word	0x080003fd
 80003c4:	08000413 	.word	0x08000413
 80003c8:	08000429 	.word	0x08000429
 80003cc:	0800043f 	.word	0x0800043f
		{
			case GPIOA :SET_BIT(MGPIOA ->OTYPER,Copy_u8Pin);	break;
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <MGPIO_vSetPinOutputType+0x198>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	79ba      	ldrb	r2, [r7, #6]
 80003d6:	2101      	movs	r1, #1
 80003d8:	fa01 f202 	lsl.w	r2, r1, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a23      	ldr	r2, [pc, #140]	; (800046c <MGPIO_vSetPinOutputType+0x198>)
 80003e0:	430b      	orrs	r3, r1
 80003e2:	6053      	str	r3, [r2, #4]
 80003e4:	e03b      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOB :SET_BIT(MGPIOB ->OTYPER,Copy_u8Pin);	break;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MGPIO_vSetPinOutputType+0x19c>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	79ba      	ldrb	r2, [r7, #6]
 80003ec:	2101      	movs	r1, #1
 80003ee:	fa01 f202 	lsl.w	r2, r1, r2
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a1e      	ldr	r2, [pc, #120]	; (8000470 <MGPIO_vSetPinOutputType+0x19c>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	6053      	str	r3, [r2, #4]
 80003fa:	e030      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOC :SET_BIT(MGPIOC ->OTYPER,Copy_u8Pin);	break;
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <MGPIO_vSetPinOutputType+0x1a0>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	79ba      	ldrb	r2, [r7, #6]
 8000402:	2101      	movs	r1, #1
 8000404:	fa01 f202 	lsl.w	r2, r1, r2
 8000408:	4611      	mov	r1, r2
 800040a:	4a1a      	ldr	r2, [pc, #104]	; (8000474 <MGPIO_vSetPinOutputType+0x1a0>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6053      	str	r3, [r2, #4]
 8000410:	e025      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOD :SET_BIT(MGPIOD ->OTYPER,Copy_u8Pin);	break;
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <MGPIO_vSetPinOutputType+0x1a4>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	79ba      	ldrb	r2, [r7, #6]
 8000418:	2101      	movs	r1, #1
 800041a:	fa01 f202 	lsl.w	r2, r1, r2
 800041e:	4611      	mov	r1, r2
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <MGPIO_vSetPinOutputType+0x1a4>)
 8000422:	430b      	orrs	r3, r1
 8000424:	6053      	str	r3, [r2, #4]
 8000426:	e01a      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOE :SET_BIT(MGPIOE ->OTYPER,Copy_u8Pin);	break;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <MGPIO_vSetPinOutputType+0x1a8>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	79ba      	ldrb	r2, [r7, #6]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	4611      	mov	r1, r2
 8000436:	4a11      	ldr	r2, [pc, #68]	; (800047c <MGPIO_vSetPinOutputType+0x1a8>)
 8000438:	430b      	orrs	r3, r1
 800043a:	6053      	str	r3, [r2, #4]
 800043c:	e00f      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			case GPIOH :SET_BIT(MGPIOH ->OTYPER,Copy_u8Pin);	break;
 800043e:	4b10      	ldr	r3, [pc, #64]	; (8000480 <MGPIO_vSetPinOutputType+0x1ac>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	79ba      	ldrb	r2, [r7, #6]
 8000444:	2101      	movs	r1, #1
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	4611      	mov	r1, r2
 800044c:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <MGPIO_vSetPinOutputType+0x1ac>)
 800044e:	430b      	orrs	r3, r1
 8000450:	6053      	str	r3, [r2, #4]
 8000452:	e004      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			default: /*  */ break;
 8000454:	bf00      	nop
 8000456:	e002      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			default: /*  */ break;
		}
	}
 8000458:	bf00      	nop
 800045a:	e000      	b.n	800045e <MGPIO_vSetPinOutputType+0x18a>
			default: /*  */ break;
 800045c:	bf00      	nop
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40020000 	.word	0x40020000
 8000470:	40020400 	.word	0x40020400
 8000474:	40020800 	.word	0x40020800
 8000478:	40020c00 	.word	0x40020c00
 800047c:	40021000 	.word	0x40021000
 8000480:	40021c00 	.word	0x40021c00

08000484 <MGPIO_vSetPinOutputSpeed>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void MGPIO_vSetPinOutputSpeed(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8OSpeed)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	460b      	mov	r3, r1
 8000490:	71bb      	strb	r3, [r7, #6]
 8000492:	4613      	mov	r3, r2
 8000494:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b05      	cmp	r3, #5
 800049a:	d857      	bhi.n	800054c <MGPIO_vSetPinOutputSpeed+0xc8>
 800049c:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <MGPIO_vSetPinOutputSpeed+0x20>)
 800049e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a2:	bf00      	nop
 80004a4:	080004bd 	.word	0x080004bd
 80004a8:	080004d5 	.word	0x080004d5
 80004ac:	080004ed 	.word	0x080004ed
 80004b0:	08000505 	.word	0x08000505
 80004b4:	0800051d 	.word	0x0800051d
 80004b8:	08000535 	.word	0x08000535
	{
		case GPIOA :(MGPIOA ->OSPEEDR)|= (u32)(Copy_u8OSpeed << (2*Copy_u8Pin)); break;
 80004bc:	4b27      	ldr	r3, [pc, #156]	; (800055c <MGPIO_vSetPinOutputSpeed+0xd8>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	7979      	ldrb	r1, [r7, #5]
 80004c2:	79ba      	ldrb	r2, [r7, #6]
 80004c4:	0052      	lsls	r2, r2, #1
 80004c6:	fa01 f202 	lsl.w	r2, r1, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a23      	ldr	r2, [pc, #140]	; (800055c <MGPIO_vSetPinOutputSpeed+0xd8>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	6093      	str	r3, [r2, #8]
 80004d2:	e03c      	b.n	800054e <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOB :(MGPIOB ->OSPEEDR)|= (u32)(Copy_u8OSpeed << (2*Copy_u8Pin)); break;
 80004d4:	4b22      	ldr	r3, [pc, #136]	; (8000560 <MGPIO_vSetPinOutputSpeed+0xdc>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	7979      	ldrb	r1, [r7, #5]
 80004da:	79ba      	ldrb	r2, [r7, #6]
 80004dc:	0052      	lsls	r2, r2, #1
 80004de:	fa01 f202 	lsl.w	r2, r1, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a1e      	ldr	r2, [pc, #120]	; (8000560 <MGPIO_vSetPinOutputSpeed+0xdc>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
 80004ea:	e030      	b.n	800054e <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOC :(MGPIOC ->OSPEEDR)|= (u32)(Copy_u8OSpeed << (2*Copy_u8Pin)); break;
 80004ec:	4b1d      	ldr	r3, [pc, #116]	; (8000564 <MGPIO_vSetPinOutputSpeed+0xe0>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	7979      	ldrb	r1, [r7, #5]
 80004f2:	79ba      	ldrb	r2, [r7, #6]
 80004f4:	0052      	lsls	r2, r2, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a19      	ldr	r2, [pc, #100]	; (8000564 <MGPIO_vSetPinOutputSpeed+0xe0>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6093      	str	r3, [r2, #8]
 8000502:	e024      	b.n	800054e <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOD :(MGPIOD ->OSPEEDR)|= (u32)(Copy_u8OSpeed << (2*Copy_u8Pin)); break;
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MGPIO_vSetPinOutputSpeed+0xe4>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	7979      	ldrb	r1, [r7, #5]
 800050a:	79ba      	ldrb	r2, [r7, #6]
 800050c:	0052      	lsls	r2, r2, #1
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	4611      	mov	r1, r2
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <MGPIO_vSetPinOutputSpeed+0xe4>)
 8000516:	430b      	orrs	r3, r1
 8000518:	6093      	str	r3, [r2, #8]
 800051a:	e018      	b.n	800054e <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOE :(MGPIOE ->OSPEEDR)|= (u32)(Copy_u8OSpeed << (2*Copy_u8Pin)); break;
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <MGPIO_vSetPinOutputSpeed+0xe8>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	7979      	ldrb	r1, [r7, #5]
 8000522:	79ba      	ldrb	r2, [r7, #6]
 8000524:	0052      	lsls	r2, r2, #1
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	4611      	mov	r1, r2
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <MGPIO_vSetPinOutputSpeed+0xe8>)
 800052e:	430b      	orrs	r3, r1
 8000530:	6093      	str	r3, [r2, #8]
 8000532:	e00c      	b.n	800054e <MGPIO_vSetPinOutputSpeed+0xca>
		case GPIOH :(MGPIOH ->OSPEEDR)|= (u32)(Copy_u8OSpeed << (2*Copy_u8Pin)); break;
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MGPIO_vSetPinOutputSpeed+0xec>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	7979      	ldrb	r1, [r7, #5]
 800053a:	79ba      	ldrb	r2, [r7, #6]
 800053c:	0052      	lsls	r2, r2, #1
 800053e:	fa01 f202 	lsl.w	r2, r1, r2
 8000542:	4611      	mov	r1, r2
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <MGPIO_vSetPinOutputSpeed+0xec>)
 8000546:	430b      	orrs	r3, r1
 8000548:	6093      	str	r3, [r2, #8]
 800054a:	e000      	b.n	800054e <MGPIO_vSetPinOutputSpeed+0xca>
		default: /**/ break;
 800054c:	bf00      	nop
	}
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40020000 	.word	0x40020000
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800
 8000568:	40020c00 	.word	0x40020c00
 800056c:	40021000 	.word	0x40021000
 8000570:	40021c00 	.word	0x40021c00

08000574 <MGPIO_vSetPinPullType>:
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void MGPIO_vSetPinPullType(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8PullType)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	460b      	mov	r3, r1
 8000580:	71bb      	strb	r3, [r7, #6]
 8000582:	4613      	mov	r3, r2
 8000584:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b05      	cmp	r3, #5
 800058a:	d857      	bhi.n	800063c <MGPIO_vSetPinPullType+0xc8>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <MGPIO_vSetPinPullType+0x20>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080005ad 	.word	0x080005ad
 8000598:	080005c5 	.word	0x080005c5
 800059c:	080005dd 	.word	0x080005dd
 80005a0:	080005f5 	.word	0x080005f5
 80005a4:	0800060d 	.word	0x0800060d
 80005a8:	08000625 	.word	0x08000625
	{
		case GPIOA :(MGPIOA ->PUPDR)|= (u32)(Copy_u8PullType << (2*Copy_u8Pin)); break;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <MGPIO_vSetPinPullType+0xd8>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	7979      	ldrb	r1, [r7, #5]
 80005b2:	79ba      	ldrb	r2, [r7, #6]
 80005b4:	0052      	lsls	r2, r2, #1
 80005b6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a23      	ldr	r2, [pc, #140]	; (800064c <MGPIO_vSetPinPullType+0xd8>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	60d3      	str	r3, [r2, #12]
 80005c2:	e03c      	b.n	800063e <MGPIO_vSetPinPullType+0xca>
		case GPIOB :(MGPIOB ->PUPDR)|= (u32)(Copy_u8PullType << (2*Copy_u8Pin)); break;
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <MGPIO_vSetPinPullType+0xdc>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	7979      	ldrb	r1, [r7, #5]
 80005ca:	79ba      	ldrb	r2, [r7, #6]
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	fa01 f202 	lsl.w	r2, r1, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <MGPIO_vSetPinPullType+0xdc>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
 80005da:	e030      	b.n	800063e <MGPIO_vSetPinPullType+0xca>
		case GPIOC :(MGPIOC ->PUPDR)|= (u32)(Copy_u8PullType << (2*Copy_u8Pin)); break;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MGPIO_vSetPinPullType+0xe0>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	7979      	ldrb	r1, [r7, #5]
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	0052      	lsls	r2, r2, #1
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a19      	ldr	r2, [pc, #100]	; (8000654 <MGPIO_vSetPinPullType+0xe0>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	60d3      	str	r3, [r2, #12]
 80005f2:	e024      	b.n	800063e <MGPIO_vSetPinPullType+0xca>
		case GPIOD :(MGPIOD ->PUPDR)|= (u32)(Copy_u8PullType << (2*Copy_u8Pin)); break;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MGPIO_vSetPinPullType+0xe4>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	7979      	ldrb	r1, [r7, #5]
 80005fa:	79ba      	ldrb	r2, [r7, #6]
 80005fc:	0052      	lsls	r2, r2, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <MGPIO_vSetPinPullType+0xe4>)
 8000606:	430b      	orrs	r3, r1
 8000608:	60d3      	str	r3, [r2, #12]
 800060a:	e018      	b.n	800063e <MGPIO_vSetPinPullType+0xca>
		case GPIOE :(MGPIOE ->PUPDR)|= (u32)(Copy_u8PullType << (2*Copy_u8Pin)); break;
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <MGPIO_vSetPinPullType+0xe8>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	7979      	ldrb	r1, [r7, #5]
 8000612:	79ba      	ldrb	r2, [r7, #6]
 8000614:	0052      	lsls	r2, r2, #1
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	4611      	mov	r1, r2
 800061c:	4a0f      	ldr	r2, [pc, #60]	; (800065c <MGPIO_vSetPinPullType+0xe8>)
 800061e:	430b      	orrs	r3, r1
 8000620:	60d3      	str	r3, [r2, #12]
 8000622:	e00c      	b.n	800063e <MGPIO_vSetPinPullType+0xca>
		case GPIOH :(MGPIOH ->PUPDR)|= (u32)(Copy_u8PullType << (2*Copy_u8Pin)); break;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MGPIO_vSetPinPullType+0xec>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	7979      	ldrb	r1, [r7, #5]
 800062a:	79ba      	ldrb	r2, [r7, #6]
 800062c:	0052      	lsls	r2, r2, #1
 800062e:	fa01 f202 	lsl.w	r2, r1, r2
 8000632:	4611      	mov	r1, r2
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <MGPIO_vSetPinPullType+0xec>)
 8000636:	430b      	orrs	r3, r1
 8000638:	60d3      	str	r3, [r2, #12]
 800063a:	e000      	b.n	800063e <MGPIO_vSetPinPullType+0xca>
		default: /**/ break;
 800063c:	bf00      	nop
	}
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40020000 	.word	0x40020000
 8000650:	40020400 	.word	0x40020400
 8000654:	40020800 	.word	0x40020800
 8000658:	40020c00 	.word	0x40020c00
 800065c:	40021000 	.word	0x40021000
 8000660:	40021c00 	.word	0x40021c00

08000664 <MGPIO_vSetPinAlternateFunction>:
		}
}
/*====================================================   END_FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void MGPIO_vSetPinAlternateFunction(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8AlternateFunction)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	460b      	mov	r3, r1
 8000670:	71bb      	strb	r3, [r7, #6]
 8000672:	4613      	mov	r3, r2
 8000674:	717b      	strb	r3, [r7, #5]
	if( Copy_u8Pin < 8U)
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	2b07      	cmp	r3, #7
 800067a:	d85b      	bhi.n	8000734 <MGPIO_vSetPinAlternateFunction+0xd0>
	{
		switch(Copy_u8Port)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b05      	cmp	r3, #5
 8000680:	f200 80b6 	bhi.w	80007f0 <MGPIO_vSetPinAlternateFunction+0x18c>
 8000684:	a201      	add	r2, pc, #4	; (adr r2, 800068c <MGPIO_vSetPinAlternateFunction+0x28>)
 8000686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800068a:	bf00      	nop
 800068c:	080006a5 	.word	0x080006a5
 8000690:	080006bd 	.word	0x080006bd
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006ed 	.word	0x080006ed
 800069c:	08000705 	.word	0x08000705
 80006a0:	0800071d 	.word	0x0800071d
		{
			case GPIOA :(MGPIOA ->AFRL)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80006a4:	4b57      	ldr	r3, [pc, #348]	; (8000804 <MGPIO_vSetPinAlternateFunction+0x1a0>)
 80006a6:	6a1b      	ldr	r3, [r3, #32]
 80006a8:	7979      	ldrb	r1, [r7, #5]
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	fa01 f202 	lsl.w	r2, r1, r2
 80006b2:	4611      	mov	r1, r2
 80006b4:	4a53      	ldr	r2, [pc, #332]	; (8000804 <MGPIO_vSetPinAlternateFunction+0x1a0>)
 80006b6:	430b      	orrs	r3, r1
 80006b8:	6213      	str	r3, [r2, #32]
 80006ba:	e09c      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOB :(MGPIOB ->AFRL)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80006bc:	4b52      	ldr	r3, [pc, #328]	; (8000808 <MGPIO_vSetPinAlternateFunction+0x1a4>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	7979      	ldrb	r1, [r7, #5]
 80006c2:	79ba      	ldrb	r2, [r7, #6]
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	4611      	mov	r1, r2
 80006cc:	4a4e      	ldr	r2, [pc, #312]	; (8000808 <MGPIO_vSetPinAlternateFunction+0x1a4>)
 80006ce:	430b      	orrs	r3, r1
 80006d0:	6213      	str	r3, [r2, #32]
 80006d2:	e090      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOC :(MGPIOC ->AFRL)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80006d4:	4b4d      	ldr	r3, [pc, #308]	; (800080c <MGPIO_vSetPinAlternateFunction+0x1a8>)
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	7979      	ldrb	r1, [r7, #5]
 80006da:	79ba      	ldrb	r2, [r7, #6]
 80006dc:	0092      	lsls	r2, r2, #2
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a49      	ldr	r2, [pc, #292]	; (800080c <MGPIO_vSetPinAlternateFunction+0x1a8>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6213      	str	r3, [r2, #32]
 80006ea:	e084      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOD :(MGPIOD ->AFRL)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80006ec:	4b48      	ldr	r3, [pc, #288]	; (8000810 <MGPIO_vSetPinAlternateFunction+0x1ac>)
 80006ee:	6a1b      	ldr	r3, [r3, #32]
 80006f0:	7979      	ldrb	r1, [r7, #5]
 80006f2:	79ba      	ldrb	r2, [r7, #6]
 80006f4:	0092      	lsls	r2, r2, #2
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	4611      	mov	r1, r2
 80006fc:	4a44      	ldr	r2, [pc, #272]	; (8000810 <MGPIO_vSetPinAlternateFunction+0x1ac>)
 80006fe:	430b      	orrs	r3, r1
 8000700:	6213      	str	r3, [r2, #32]
 8000702:	e078      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOE :(MGPIOE ->AFRL)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 8000704:	4b43      	ldr	r3, [pc, #268]	; (8000814 <MGPIO_vSetPinAlternateFunction+0x1b0>)
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	7979      	ldrb	r1, [r7, #5]
 800070a:	79ba      	ldrb	r2, [r7, #6]
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	fa01 f202 	lsl.w	r2, r1, r2
 8000712:	4611      	mov	r1, r2
 8000714:	4a3f      	ldr	r2, [pc, #252]	; (8000814 <MGPIO_vSetPinAlternateFunction+0x1b0>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6213      	str	r3, [r2, #32]
 800071a:	e06c      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOH :(MGPIOH ->AFRL)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 800071c:	4b3e      	ldr	r3, [pc, #248]	; (8000818 <MGPIO_vSetPinAlternateFunction+0x1b4>)
 800071e:	6a1b      	ldr	r3, [r3, #32]
 8000720:	7979      	ldrb	r1, [r7, #5]
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	0092      	lsls	r2, r2, #2
 8000726:	fa01 f202 	lsl.w	r2, r1, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a3a      	ldr	r2, [pc, #232]	; (8000818 <MGPIO_vSetPinAlternateFunction+0x1b4>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6213      	str	r3, [r2, #32]
 8000732:	e060      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			default: /**/ break;
		}
	}
	else 
	{
		Copy_u8Pin %= 8;
 8000734:	79bb      	ldrb	r3, [r7, #6]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	71bb      	strb	r3, [r7, #6]
		switch(Copy_u8Port)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b05      	cmp	r3, #5
 8000740:	d858      	bhi.n	80007f4 <MGPIO_vSetPinAlternateFunction+0x190>
 8000742:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <MGPIO_vSetPinAlternateFunction+0xe4>)
 8000744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000748:	08000761 	.word	0x08000761
 800074c:	08000779 	.word	0x08000779
 8000750:	08000791 	.word	0x08000791
 8000754:	080007a9 	.word	0x080007a9
 8000758:	080007c1 	.word	0x080007c1
 800075c:	080007d9 	.word	0x080007d9
		{
			case GPIOA :(MGPIOA ->AFRH)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 8000760:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MGPIO_vSetPinAlternateFunction+0x1a0>)
 8000762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000764:	7979      	ldrb	r1, [r7, #5]
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	fa01 f202 	lsl.w	r2, r1, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a24      	ldr	r2, [pc, #144]	; (8000804 <MGPIO_vSetPinAlternateFunction+0x1a0>)
 8000772:	430b      	orrs	r3, r1
 8000774:	6253      	str	r3, [r2, #36]	; 0x24
 8000776:	e03e      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOB :(MGPIOB ->AFRH)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 8000778:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MGPIO_vSetPinAlternateFunction+0x1a4>)
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	7979      	ldrb	r1, [r7, #5]
 800077e:	79ba      	ldrb	r2, [r7, #6]
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	fa01 f202 	lsl.w	r2, r1, r2
 8000786:	4611      	mov	r1, r2
 8000788:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MGPIO_vSetPinAlternateFunction+0x1a4>)
 800078a:	430b      	orrs	r3, r1
 800078c:	6253      	str	r3, [r2, #36]	; 0x24
 800078e:	e032      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOC :(MGPIOC ->AFRH)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MGPIO_vSetPinAlternateFunction+0x1a8>)
 8000792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000794:	7979      	ldrb	r1, [r7, #5]
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	0092      	lsls	r2, r2, #2
 800079a:	fa01 f202 	lsl.w	r2, r1, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a1a      	ldr	r2, [pc, #104]	; (800080c <MGPIO_vSetPinAlternateFunction+0x1a8>)
 80007a2:	430b      	orrs	r3, r1
 80007a4:	6253      	str	r3, [r2, #36]	; 0x24
 80007a6:	e026      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOD :(MGPIOD ->AFRH)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <MGPIO_vSetPinAlternateFunction+0x1ac>)
 80007aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ac:	7979      	ldrb	r1, [r7, #5]
 80007ae:	79ba      	ldrb	r2, [r7, #6]
 80007b0:	0092      	lsls	r2, r2, #2
 80007b2:	fa01 f202 	lsl.w	r2, r1, r2
 80007b6:	4611      	mov	r1, r2
 80007b8:	4a15      	ldr	r2, [pc, #84]	; (8000810 <MGPIO_vSetPinAlternateFunction+0x1ac>)
 80007ba:	430b      	orrs	r3, r1
 80007bc:	6253      	str	r3, [r2, #36]	; 0x24
 80007be:	e01a      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOE :(MGPIOE ->AFRH)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MGPIO_vSetPinAlternateFunction+0x1b0>)
 80007c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c4:	7979      	ldrb	r1, [r7, #5]
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	0092      	lsls	r2, r2, #2
 80007ca:	fa01 f202 	lsl.w	r2, r1, r2
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a10      	ldr	r2, [pc, #64]	; (8000814 <MGPIO_vSetPinAlternateFunction+0x1b0>)
 80007d2:	430b      	orrs	r3, r1
 80007d4:	6253      	str	r3, [r2, #36]	; 0x24
 80007d6:	e00e      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			case GPIOH :(MGPIOH ->AFRH)|= (u32)(Copy_u8AlternateFunction << (4*Copy_u8Pin)); break;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MGPIO_vSetPinAlternateFunction+0x1b4>)
 80007da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007dc:	7979      	ldrb	r1, [r7, #5]
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	0092      	lsls	r2, r2, #2
 80007e2:	fa01 f202 	lsl.w	r2, r1, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <MGPIO_vSetPinAlternateFunction+0x1b4>)
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6253      	str	r3, [r2, #36]	; 0x24
 80007ee:	e002      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			default: /**/ break;
 80007f0:	bf00      	nop
 80007f2:	e000      	b.n	80007f6 <MGPIO_vSetPinAlternateFunction+0x192>
			default: /**/ break;
 80007f4:	bf00      	nop
		}
	}
}
 80007f6:	bf00      	nop
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	40020000 	.word	0x40020000
 8000808:	40020400 	.word	0x40020400
 800080c:	40020800 	.word	0x40020800
 8000810:	40020c00 	.word	0x40020c00
 8000814:	40021000 	.word	0x40021000
 8000818:	40021c00 	.word	0x40021c00

0800081c <MQTT_Connect>:
u8 packetInd = 0;

u16 packetID = 1;


void MQTT_Connect(u8* clientID){
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	u8 remLen = (12 +  strlen(clientID));
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff fcd5 	bl	80001d4 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b2db      	uxtb	r3, r3
 800082e:	330c      	adds	r3, #12
 8000830:	73fb      	strb	r3, [r7, #15]
	packetInd = 0;
 8000832:	4b4f      	ldr	r3, [pc, #316]	; (8000970 <MQTT_Connect+0x154>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
	packet[packetInd++] = 0x10;
 8000838:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MQTT_Connect+0x154>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	b2d1      	uxtb	r1, r2
 8000840:	4a4b      	ldr	r2, [pc, #300]	; (8000970 <MQTT_Connect+0x154>)
 8000842:	7011      	strb	r1, [r2, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <MQTT_Connect+0x158>)
 8000848:	2110      	movs	r1, #16
 800084a:	5499      	strb	r1, [r3, r2]
	packet[packetInd++] = remLen;
 800084c:	4b48      	ldr	r3, [pc, #288]	; (8000970 <MQTT_Connect+0x154>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	b2d1      	uxtb	r1, r2
 8000854:	4a46      	ldr	r2, [pc, #280]	; (8000970 <MQTT_Connect+0x154>)
 8000856:	7011      	strb	r1, [r2, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	4a46      	ldr	r2, [pc, #280]	; (8000974 <MQTT_Connect+0x158>)
 800085c:	7bfb      	ldrb	r3, [r7, #15]
 800085e:	5453      	strb	r3, [r2, r1]
	packet[packetInd++] = 0x00;
 8000860:	4b43      	ldr	r3, [pc, #268]	; (8000970 <MQTT_Connect+0x154>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	1c5a      	adds	r2, r3, #1
 8000866:	b2d1      	uxtb	r1, r2
 8000868:	4a41      	ldr	r2, [pc, #260]	; (8000970 <MQTT_Connect+0x154>)
 800086a:	7011      	strb	r1, [r2, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MQTT_Connect+0x158>)
 8000870:	2100      	movs	r1, #0
 8000872:	5499      	strb	r1, [r3, r2]
	packet[packetInd++] = 0x04;
 8000874:	4b3e      	ldr	r3, [pc, #248]	; (8000970 <MQTT_Connect+0x154>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	1c5a      	adds	r2, r3, #1
 800087a:	b2d1      	uxtb	r1, r2
 800087c:	4a3c      	ldr	r2, [pc, #240]	; (8000970 <MQTT_Connect+0x154>)
 800087e:	7011      	strb	r1, [r2, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <MQTT_Connect+0x158>)
 8000884:	2104      	movs	r1, #4
 8000886:	5499      	strb	r1, [r3, r2]

	strcpy(packet+packetInd,"MQTT");
 8000888:	4b39      	ldr	r3, [pc, #228]	; (8000970 <MQTT_Connect+0x154>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MQTT_Connect+0x158>)
 8000890:	4413      	add	r3, r2
 8000892:	4a39      	ldr	r2, [pc, #228]	; (8000978 <MQTT_Connect+0x15c>)
 8000894:	6810      	ldr	r0, [r2, #0]
 8000896:	6018      	str	r0, [r3, #0]
 8000898:	7912      	ldrb	r2, [r2, #4]
 800089a:	711a      	strb	r2, [r3, #4]
	packetInd += strlen("MQTT");
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <MQTT_Connect+0x154>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3304      	adds	r3, #4
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b32      	ldr	r3, [pc, #200]	; (8000970 <MQTT_Connect+0x154>)
 80008a6:	701a      	strb	r2, [r3, #0]

	packet[packetInd++] = 0x04;
 80008a8:	4b31      	ldr	r3, [pc, #196]	; (8000970 <MQTT_Connect+0x154>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	1c5a      	adds	r2, r3, #1
 80008ae:	b2d1      	uxtb	r1, r2
 80008b0:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <MQTT_Connect+0x154>)
 80008b2:	7011      	strb	r1, [r2, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MQTT_Connect+0x158>)
 80008b8:	2104      	movs	r1, #4
 80008ba:	5499      	strb	r1, [r3, r2]
	packet[packetInd++] = 0x02;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <MQTT_Connect+0x154>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	b2d1      	uxtb	r1, r2
 80008c4:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <MQTT_Connect+0x154>)
 80008c6:	7011      	strb	r1, [r2, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MQTT_Connect+0x158>)
 80008cc:	2102      	movs	r1, #2
 80008ce:	5499      	strb	r1, [r3, r2]
	packet[packetInd++] = 0xFF;
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <MQTT_Connect+0x154>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	b2d1      	uxtb	r1, r2
 80008d8:	4a25      	ldr	r2, [pc, #148]	; (8000970 <MQTT_Connect+0x154>)
 80008da:	7011      	strb	r1, [r2, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MQTT_Connect+0x158>)
 80008e0:	21ff      	movs	r1, #255	; 0xff
 80008e2:	5499      	strb	r1, [r3, r2]
	packet[packetInd++] = 0xFF;
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MQTT_Connect+0x154>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	b2d1      	uxtb	r1, r2
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <MQTT_Connect+0x154>)
 80008ee:	7011      	strb	r1, [r2, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b20      	ldr	r3, [pc, #128]	; (8000974 <MQTT_Connect+0x158>)
 80008f4:	21ff      	movs	r1, #255	; 0xff
 80008f6:	5499      	strb	r1, [r3, r2]

	packet[packetInd++] = 0x00;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MQTT_Connect+0x154>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	1c5a      	adds	r2, r3, #1
 80008fe:	b2d1      	uxtb	r1, r2
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <MQTT_Connect+0x154>)
 8000902:	7011      	strb	r1, [r2, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <MQTT_Connect+0x158>)
 8000908:	2100      	movs	r1, #0
 800090a:	5499      	strb	r1, [r3, r2]
	packet[packetInd++] = strlen(clientID);
 800090c:	6878      	ldr	r0, [r7, #4]
 800090e:	f7ff fc61 	bl	80001d4 <strlen>
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MQTT_Connect+0x154>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	1c5a      	adds	r2, r3, #1
 8000918:	b2d1      	uxtb	r1, r2
 800091a:	4a15      	ldr	r2, [pc, #84]	; (8000970 <MQTT_Connect+0x154>)
 800091c:	7011      	strb	r1, [r2, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	b2c1      	uxtb	r1, r0
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MQTT_Connect+0x158>)
 8000924:	5499      	strb	r1, [r3, r2]
	strcpy(packet+packetInd,clientID);
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MQTT_Connect+0x154>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	461a      	mov	r2, r3
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MQTT_Connect+0x158>)
 800092e:	4413      	add	r3, r2
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	4618      	mov	r0, r3
 8000934:	f000 f9de 	bl	8000cf4 <strcpy>
	packetInd += (u8) strlen((s8*)clientID);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fc4b 	bl	80001d4 <strlen>
 800093e:	4603      	mov	r3, r0
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MQTT_Connect+0x154>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	b2da      	uxtb	r2, r3
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MQTT_Connect+0x154>)
 800094c:	701a      	strb	r2, [r3, #0]
	packet[packetInd++] = '\0';
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MQTT_Connect+0x154>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	b2d1      	uxtb	r1, r2
 8000956:	4a06      	ldr	r2, [pc, #24]	; (8000970 <MQTT_Connect+0x154>)
 8000958:	7011      	strb	r1, [r2, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MQTT_Connect+0x158>)
 800095e:	2100      	movs	r1, #0
 8000960:	5499      	strb	r1, [r3, r2]
	// send packet to UART
	//HAL_UART_Transmit(&huart6, packet, packetInd, packetInd*2);
	MUART6_Send_String( packet);
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <MQTT_Connect+0x158>)
 8000964:	f000 f90c 	bl	8000b80 <MUART6_Send_String>
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200000b2 	.word	0x200000b2
 8000974:	2000001c 	.word	0x2000001c
 8000978:	08000d1c 	.word	0x08000d1c

0800097c <MRCC_vEnableClock>:
	
*/


void MRCC_vEnableClock(BusName_t BusName , u8 Copy_u8PerNum )
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	460a      	mov	r2, r1
 8000986:	71fb      	strb	r3, [r7, #7]
 8000988:	4613      	mov	r3, r2
 800098a:	71bb      	strb	r3, [r7, #6]
	
	switch(BusName)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	2b03      	cmp	r3, #3
 8000990:	d836      	bhi.n	8000a00 <MRCC_vEnableClock+0x84>
 8000992:	a201      	add	r2, pc, #4	; (adr r2, 8000998 <MRCC_vEnableClock+0x1c>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	080009a9 	.word	0x080009a9
 800099c:	080009bf 	.word	0x080009bf
 80009a0:	080009d5 	.word	0x080009d5
 80009a4:	080009eb 	.word	0x080009eb
	{
		case AHB1_BUS:  SET_BIT(RCC_AHB1ENR,Copy_u8PerNum );         break ;
 80009a8:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MRCC_vEnableClock+0x94>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	79ba      	ldrb	r2, [r7, #6]
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <MRCC_vEnableClock+0x94>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	e021      	b.n	8000a02 <MRCC_vEnableClock+0x86>
		case AHB2_BUS:  SET_BIT(RCC_AHB2ENR,Copy_u8PerNum );         break ;
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MRCC_vEnableClock+0x98>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	79ba      	ldrb	r2, [r7, #6]
 80009c4:	2101      	movs	r1, #1
 80009c6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ca:	4611      	mov	r1, r2
 80009cc:	4a11      	ldr	r2, [pc, #68]	; (8000a14 <MRCC_vEnableClock+0x98>)
 80009ce:	430b      	orrs	r3, r1
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	e016      	b.n	8000a02 <MRCC_vEnableClock+0x86>
		case APB1_BUS:  SET_BIT(RCC_APB1ENR,Copy_u8PerNum );         break ;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MRCC_vEnableClock+0x9c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	79ba      	ldrb	r2, [r7, #6]
 80009da:	2101      	movs	r1, #1
 80009dc:	fa01 f202 	lsl.w	r2, r1, r2
 80009e0:	4611      	mov	r1, r2
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <MRCC_vEnableClock+0x9c>)
 80009e4:	430b      	orrs	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
 80009e8:	e00b      	b.n	8000a02 <MRCC_vEnableClock+0x86>
		case APB2_BUS:  SET_BIT(RCC_APB2ENR,Copy_u8PerNum );         break ;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MRCC_vEnableClock+0xa0>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	79ba      	ldrb	r2, [r7, #6]
 80009f0:	2101      	movs	r1, #1
 80009f2:	fa01 f202 	lsl.w	r2, r1, r2
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <MRCC_vEnableClock+0xa0>)
 80009fa:	430b      	orrs	r3, r1
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	e000      	b.n	8000a02 <MRCC_vEnableClock+0x86>
		default :     /*   ERROR   */          break ;
 8000a00:	bf00      	nop
		
	}
	
	
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023830 	.word	0x40023830
 8000a14:	40023834 	.word	0x40023834
 8000a18:	40023840 	.word	0x40023840
 8000a1c:	40023844 	.word	0x40023844

08000a20 <MRCC_vInitSystemCLK>:
				- PLLSrc	:PLL_HSE | PLL_HSI
				- HSESrc    :HSE_Crystal ,HSE_RC 
 */

void MRCC_vInitSystemCLK(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
	/********** HSI **********/
#if CLKSRC == HSI 
	/* 1- EN HSI */
	SET_BIT(MRCC->CR , 0U);
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MRCC_vInitSystemCLK+0x34>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <MRCC_vInitSystemCLK+0x34>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6013      	str	r3, [r2, #0]
	/* 2- CLK SYS --> HSI */
	CLR_BIT(MRCC->CFGR, 0U);
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MRCC_vInitSystemCLK+0x34>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <MRCC_vInitSystemCLK+0x34>)
 8000a36:	f023 0301 	bic.w	r3, r3, #1
 8000a3a:	6093      	str	r3, [r2, #8]
	CLR_BIT(MRCC->CFGR, 1U);
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MRCC_vInitSystemCLK+0x34>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <MRCC_vInitSystemCLK+0x34>)
 8000a42:	f023 0302 	bic.w	r3, r3, #2
 8000a46:	6093      	str	r3, [r2, #8]
/****************************************************/

#else 
/* Error*/
#endif // The End Of Big IF	
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <MUART_vInit>:
* \Reentrancy      :                          
* \Parameters (in) :                     
* \Parameters (out):                                                       
* \Return value:   :                                  
*******************************************************************************/
void MUART_vInit(void){
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
#endif

   /*===========	UART_6	 ===========*/
#if (UART6_USED == U_ENABLE)
	/*1)   */
	UART6_REG->CR1.SBK = UART1_SEND_BREAK;
 8000a5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a5e:	68d3      	ldr	r3, [r2, #12]
 8000a60:	f36f 0300 	bfc	r3, #0, #1
 8000a64:	60d3      	str	r3, [r2, #12]
	/*2)  */
	UART6_REG->CR1.RE = UART1_RECEIVER;
 8000a66:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a68:	68d3      	ldr	r3, [r2, #12]
 8000a6a:	f043 0304 	orr.w	r3, r3, #4
 8000a6e:	60d3      	str	r3, [r2, #12]
	/*3)  */
	UART6_REG->CR1.TE = UART1_TRANSMITTER;
 8000a70:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a72:	68d3      	ldr	r3, [r2, #12]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	60d3      	str	r3, [r2, #12]
	/*4)  */
	UART6_REG->CR1.RXNEIE = UART1_RX_INT;
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a7c:	68d3      	ldr	r3, [r2, #12]
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	60d3      	str	r3, [r2, #12]
	/*5)  */
	UART6_REG->CR1.TCIE = UART1_T_COMP_INT;
 8000a84:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a86:	68d3      	ldr	r3, [r2, #12]
 8000a88:	f36f 1386 	bfc	r3, #6, #1
 8000a8c:	60d3      	str	r3, [r2, #12]
	/*6)  */
	UART6_REG->CR1.PCE = UART1_PARITY_ENABLE;
 8000a8e:	4a11      	ldr	r2, [pc, #68]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a90:	68d3      	ldr	r3, [r2, #12]
 8000a92:	f36f 238a 	bfc	r3, #10, #1
 8000a96:	60d3      	str	r3, [r2, #12]
	/*7)  */
	UART6_REG->CR1.PS = UART1_PARITY_MODE;
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <MUART_vInit+0x7c>)
 8000a9a:	68d3      	ldr	r3, [r2, #12]
 8000a9c:	f36f 2349 	bfc	r3, #9, #1
 8000aa0:	60d3      	str	r3, [r2, #12]
	/*8)  */
	UART6_REG->CR1.M = UART1_WORD_LEN;
 8000aa2:	4a0c      	ldr	r2, [pc, #48]	; (8000ad4 <MUART_vInit+0x7c>)
 8000aa4:	68d3      	ldr	r3, [r2, #12]
 8000aa6:	f36f 330c 	bfc	r3, #12, #1
 8000aaa:	60d3      	str	r3, [r2, #12]
	/*9)  */
	UART6_REG->CR1.OVER8	= UART1_OVER_SAMPLING;
 8000aac:	4a09      	ldr	r2, [pc, #36]	; (8000ad4 <MUART_vInit+0x7c>)
 8000aae:	68d3      	ldr	r3, [r2, #12]
 8000ab0:	f36f 33cf 	bfc	r3, #15, #1
 8000ab4:	60d3      	str	r3, [r2, #12]
    /*10)  */
	UART6_REG->BRR = UART1_BUAD_RATE;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MUART_vInit+0x7c>)
 8000ab8:	f240 6283 	movw	r2, #1667	; 0x683
 8000abc:	609a      	str	r2, [r3, #8]
    /*11)  */
	UART6_REG->CR2 |= (UART1_STOP_BITS << 12);
 8000abe:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <MUART_vInit+0x7c>)
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <MUART_vInit+0x7c>)
 8000ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac8:	6113      	str	r3, [r2, #16]

#endif
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40011400 	.word	0x40011400

08000ad8 <MUART_vEnable>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
/*	Function :
*
*/
void MUART_vEnable(u8 copy_u8Index){
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	/*1) */
	switch(copy_u8Index){
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b06      	cmp	r3, #6
 8000ae6:	d012      	beq.n	8000b0e <MUART_vEnable+0x36>
 8000ae8:	2b06      	cmp	r3, #6
 8000aea:	dc16      	bgt.n	8000b1a <MUART_vEnable+0x42>
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d002      	beq.n	8000af6 <MUART_vEnable+0x1e>
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d006      	beq.n	8000b02 <MUART_vEnable+0x2a>
		/* */
		case 2: UART2_REG -> CR1.UE = 1; break;
		/* */
		case 6: UART6_REG -> CR1.UE = 1; break;
		/* */
		default : /* */ break;
 8000af4:	e011      	b.n	8000b1a <MUART_vEnable+0x42>
		case 1: UART1_REG -> CR1.UE = 1; break;
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <MUART_vEnable+0x50>)
 8000af8:	68d3      	ldr	r3, [r2, #12]
 8000afa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afe:	60d3      	str	r3, [r2, #12]
 8000b00:	e00c      	b.n	8000b1c <MUART_vEnable+0x44>
		case 2: UART2_REG -> CR1.UE = 1; break;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <MUART_vEnable+0x54>)
 8000b04:	68d3      	ldr	r3, [r2, #12]
 8000b06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b0a:	60d3      	str	r3, [r2, #12]
 8000b0c:	e006      	b.n	8000b1c <MUART_vEnable+0x44>
		case 6: UART6_REG -> CR1.UE = 1; break;
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <MUART_vEnable+0x58>)
 8000b10:	68d3      	ldr	r3, [r2, #12]
 8000b12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b16:	60d3      	str	r3, [r2, #12]
 8000b18:	e000      	b.n	8000b1c <MUART_vEnable+0x44>
		default : /* */ break;
 8000b1a:	bf00      	nop
	}
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40011400 	.word	0x40011400

08000b34 <USART1_IRQHandler>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
/*	Function :
*
*/
void USART1_IRQHandler(void){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    /* */
	UART1_REG -> SR = 0 ;
 8000b38:	4b03      	ldr	r3, [pc, #12]	; (8000b48 <USART1_IRQHandler+0x14>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
	/* */
	MUSART1_CallBack();
 8000b3e:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <USART1_IRQHandler+0x18>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4798      	blx	r3

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40011000 	.word	0x40011000
 8000b4c:	200000b4 	.word	0x200000b4

08000b50 <MUART6_vSendChar>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void MUART6_vSendChar (u8 Copy_u8Char)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
		 that the transmission of the last frame is complete. This is required for instance when
		 the USART is disabled or enters the Halt mode to avoid corrupting the last transmission.

	****************************************/

	UART6_REG->DR = Copy_u8Char;   // Load the Data
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <MUART6_vSendChar+0x2c>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	6053      	str	r3, [r2, #4]
	while (!(UART6_REG->SR & (1<<6)));  // Wait for TC to SET.. This indicates that the data has been transmitted
 8000b60:	bf00      	nop
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MUART6_vSendChar+0x2c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f9      	beq.n	8000b62 <MUART6_vSendChar+0x12>
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40011400 	.word	0x40011400

08000b80 <MUART6_Send_String>:
/*====================================================   END_ FUNCTION   ====================================================*/
/*====================================================   Start_FUNCTION   ====================================================*/
void MUART6_Send_String( u8 *string)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
      short i =0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	81fb      	strh	r3, [r7, #14]
	 while(string[i]!='\0')
 8000b8c:	e00d      	b.n	8000baa <MUART6_Send_String+0x2a>
	 {
		 MUART6_vSendChar (string[i]);
 8000b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ffd9 	bl	8000b50 <MUART6_vSendChar>
			i++;
 8000b9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	81fb      	strh	r3, [r7, #14]
	 while(string[i]!='\0')
 8000baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1ea      	bne.n	8000b8e <MUART6_Send_String+0xe>
	 }
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <main>:
#include "GPIO_interface.h"
#include "UART_interace.h"

#include "MQTT.h"
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	MRCC_vInitSystemCLK();
 8000bc8:	f7ff ff2a 	bl	8000a20 <MRCC_vInitSystemCLK>
	MRCC_vEnableClock(AHB1, _PERIPHERAL_EN_GPIOC);
 8000bcc:	2102      	movs	r1, #2
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f7ff fed4 	bl	800097c <MRCC_vEnableClock>
	MRCC_vEnableClock(APB2, PERIPHERAL_EN_USART6);
 8000bd4:	2105      	movs	r1, #5
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f7ff fed0 	bl	800097c <MRCC_vEnableClock>

	MGPIO_vSetPinMode(GPIOC, PIN6, ALTFN);
 8000bdc:	2202      	movs	r2, #2
 8000bde:	2106      	movs	r1, #6
 8000be0:	2002      	movs	r0, #2
 8000be2:	f7ff faff 	bl	80001e4 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(GPIOC, PIN6,PUSH_PULL);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2106      	movs	r1, #6
 8000bea:	2002      	movs	r0, #2
 8000bec:	f7ff fb72 	bl	80002d4 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(GPIOC, PIN6,VERY_HIGH_SPEED);
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	2106      	movs	r1, #6
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f7ff fc45 	bl	8000484 <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinPullType(GPIOC, PIN6,PULL_UP);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2106      	movs	r1, #6
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f7ff fcb8 	bl	8000574 <MGPIO_vSetPinPullType>
	MGPIO_vSetPinAlternateFunction(GPIOC, PIN6,AF8);
 8000c04:	2208      	movs	r2, #8
 8000c06:	2106      	movs	r1, #6
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fd2b 	bl	8000664 <MGPIO_vSetPinAlternateFunction>

	MGPIO_vSetPinMode(GPIOC, PIN7, ALTFN);
 8000c0e:	2202      	movs	r2, #2
 8000c10:	2107      	movs	r1, #7
 8000c12:	2002      	movs	r0, #2
 8000c14:	f7ff fae6 	bl	80001e4 <MGPIO_vSetPinMode>
	MGPIO_vSetPinOutputType(GPIOC, PIN7,PUSH_PULL);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2107      	movs	r1, #7
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff fb59 	bl	80002d4 <MGPIO_vSetPinOutputType>
	MGPIO_vSetPinOutputSpeed(GPIOC, PIN7,VERY_HIGH_SPEED);
 8000c22:	2203      	movs	r2, #3
 8000c24:	2107      	movs	r1, #7
 8000c26:	2002      	movs	r0, #2
 8000c28:	f7ff fc2c 	bl	8000484 <MGPIO_vSetPinOutputSpeed>
	MGPIO_vSetPinPullType(GPIOC, PIN7,PULL_UP);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2107      	movs	r1, #7
 8000c30:	2002      	movs	r0, #2
 8000c32:	f7ff fc9f 	bl	8000574 <MGPIO_vSetPinPullType>
	MGPIO_vSetPinAlternateFunction(GPIOC, PIN7,AF8);
 8000c36:	2208      	movs	r2, #8
 8000c38:	2107      	movs	r1, #7
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f7ff fd12 	bl	8000664 <MGPIO_vSetPinAlternateFunction>

	MUART_vInit();
 8000c40:	f7ff ff0a 	bl	8000a58 <MUART_vInit>
	MUART_vEnable(6);
 8000c44:	2006      	movs	r0, #6
 8000c46:	f7ff ff47 	bl	8000ad8 <MUART_vEnable>
	MQTT_Connect("jhfrtjdthvhjg");
 8000c4a:	4802      	ldr	r0, [pc, #8]	; (8000c54 <main+0x90>)
 8000c4c:	f7ff fde6 	bl	800081c <MQTT_Connect>
    /* Loop forever */
	for(;;);
 8000c50:	e7fe      	b.n	8000c50 <main+0x8c>
 8000c52:	bf00      	nop
 8000c54:	08000d24 	.word	0x08000d24

08000c58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c86:	f000 f811 	bl	8000cac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8a:	f7ff ff9b 	bl	8000bc4 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   r0, =_estack
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c9c:	08000d3c 	.word	0x08000d3c
  ldr r2, =_sbss
 8000ca0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ca4:	200000b8 	.word	0x200000b8

08000ca8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC_IRQHandler>
	...

08000cac <__libc_init_array>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	4d0d      	ldr	r5, [pc, #52]	; (8000ce4 <__libc_init_array+0x38>)
 8000cb0:	4c0d      	ldr	r4, [pc, #52]	; (8000ce8 <__libc_init_array+0x3c>)
 8000cb2:	1b64      	subs	r4, r4, r5
 8000cb4:	10a4      	asrs	r4, r4, #2
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	42a6      	cmp	r6, r4
 8000cba:	d109      	bne.n	8000cd0 <__libc_init_array+0x24>
 8000cbc:	4d0b      	ldr	r5, [pc, #44]	; (8000cec <__libc_init_array+0x40>)
 8000cbe:	4c0c      	ldr	r4, [pc, #48]	; (8000cf0 <__libc_init_array+0x44>)
 8000cc0:	f000 f820 	bl	8000d04 <_init>
 8000cc4:	1b64      	subs	r4, r4, r5
 8000cc6:	10a4      	asrs	r4, r4, #2
 8000cc8:	2600      	movs	r6, #0
 8000cca:	42a6      	cmp	r6, r4
 8000ccc:	d105      	bne.n	8000cda <__libc_init_array+0x2e>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd4:	4798      	blx	r3
 8000cd6:	3601      	adds	r6, #1
 8000cd8:	e7ee      	b.n	8000cb8 <__libc_init_array+0xc>
 8000cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cde:	4798      	blx	r3
 8000ce0:	3601      	adds	r6, #1
 8000ce2:	e7f2      	b.n	8000cca <__libc_init_array+0x1e>
 8000ce4:	08000d34 	.word	0x08000d34
 8000ce8:	08000d34 	.word	0x08000d34
 8000cec:	08000d34 	.word	0x08000d34
 8000cf0:	08000d38 	.word	0x08000d38

08000cf4 <strcpy>:
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000cfa:	f803 2b01 	strb.w	r2, [r3], #1
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d1f9      	bne.n	8000cf6 <strcpy+0x2>
 8000d02:	4770      	bx	lr

08000d04 <_init>:
 8000d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d06:	bf00      	nop
 8000d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0a:	bc08      	pop	{r3}
 8000d0c:	469e      	mov	lr, r3
 8000d0e:	4770      	bx	lr

08000d10 <_fini>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	bf00      	nop
 8000d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d16:	bc08      	pop	{r3}
 8000d18:	469e      	mov	lr, r3
 8000d1a:	4770      	bx	lr
